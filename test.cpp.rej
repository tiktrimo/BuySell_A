diff a/test.cpp b/test.cpp	(rejected hunks)
@@ -1,8 +1,67 @@
 #include "gmock/gmock.h"
+#include <string>
 
-TEST(a, b)
+using namespace testing;
+
+// Interface���� �� ����. �ٸ� ���Ϸ� �̵��ϼŵ� ���� �� �����ϴ�.
+
+class IStockBrockerDriver
+{
+public:
+	virtual ~IStockBrockerDriver() = default;
+	virtual void login(std::string id, std::string password) = 0;
+	virtual void buy(std::string stockCode, int price, int count) = 0;
+	virtual void sell(std::string stockCode, int price, int count) = 0;
+	virtual void getPrice(std::string stockCode) = 0;
+};
+
+class KiwiDriver : public IStockBrockerDriver
 {
-	EXPECT_EQ(1, 1);
+
+};
+
+class NemoDriver : public IStockBrockerDriver
+{
+
+};
+
+class MockDriver : public IStockBrockerDriver
+{
+public:
+	MOCK_METHOD(void, login, (std::string id, std::string password), (override));
+	MOCK_METHOD(void, buy, (std::string stockCode, int price, int count), (override));
+	MOCK_METHOD(void, sell, (std::string stockCode, int price, int count), (override));
+	MOCK_METHOD(void, getPrice, (std::string stockCode), (override));
+};
+
+// Unit Test Code. ��� �߰��ϰڽ��ϴ�.
+
+TEST(MockDriverTest, LoginCalledWithCorrectArguments) {
+    MockDriver mock;
+    EXPECT_CALL(mock, login(StrEq("username"), StrEq("password"))).Times(1);
+
+    mock.login("username", "password");
+}
+
+TEST(MockDriverTest, BuyCalledWithCorrectArguments) {
+    MockDriver mock;
+    EXPECT_CALL(mock, buy(StrEq("AAPL"), 200, 10)).Times(1);
+
+    mock.buy("AAPL", 200, 10);
+}
+
+TEST(MockDriverTest, SellCalledWithCorrectArguments) {
+    MockDriver mock;
+    EXPECT_CALL(mock, sell(StrEq("AAPL"), 200, 10)).Times(1);
+
+    mock.sell("AAPL", 200, 10);
+}
+
+TEST(MockDriverTest, GetPriceCalledWithCorrectStockCode) {
+    MockDriver mock;
+    EXPECT_CALL(mock, getPrice(StrEq("AAPL"))).Times(1);
+
+    mock.getPrice("AAPL");
 }
 
 int main()
